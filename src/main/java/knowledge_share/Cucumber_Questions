Questions
=========
1. What is Cucumber?
Cucumber is a testing framework that supports Behavior-Driven Development (BDD). It allows you to write test
cases in a natural language format, known as Gherkin, which is easily understandable by non-technical
stakeholders.

2. What are the key components of Cucumber?
The key components of Cucumber are:
1. Feature files written in Gherkin syntax
2. Step definitions written in programming languages such as Java, Ruby, or JavaScript
3. Runner classes to execute the feature files
4. Hooks for setup and teardown operations
5. Tags to organize and run specific scenarios or features

3. What is Gherkin syntax?
Gherkin is a business-readable, domain-specific language used to describe the behavior of a software application
in a structured format. It consists of predefined keywords such as Given, When, Then, And, and But, which help
in writing scenarios in a human-readable format.

4. What are the advantages of using Cucumber for testing?
Some advantages of using Cucumber for testing include:
1. Improved collaboration between technical and non-technical stakeholders
2. Easy-to-understand feature files facilitate clear communication and documentation
3. Reusability of step definitions across different scenarios
4. Integration with various programming languages and testing frameworks
5. Ability to generate reports for test results and coverage analysis

5. How do you write a scenario in a feature file?
Scenarios in feature files are written using Gherkin syntax. Each scenario typically consists of a title,
followed by steps using Given, When, Then, And, or But keywords to describe the behavior being tested.

6. Explain the concept of tags in Cucumber.
Tags are annotations used to organize and filter scenarios or features. They can be added to feature files,
scenarios, or individual steps. Tags are prefixed with the '@' symbol and can be used to mark scenarios for
different purposes such as smoke testing, regression testing, or to specify the environment.

7. What are step definitions?
Step definitions are the implementation of the steps described in feature files. They are written in programming
languages like Java, Ruby, or JavaScript and are responsible for executing the corresponding actions or
validations when a step is matched during test execution.

8. How do you parameterize steps in Cucumber?
Steps can be parameterized by using placeholders in Gherkin syntax, typically enclosed within angle brackets.
These placeholders can then be passed as arguments to step definition methods. For example, Given I have
<number> cucumbers can be matched with @Given("I have {int} cucumbers") in the step definition.

9. Explain the concept of background in Cucumber.
Background is a feature in Cucumber that allows you to specify steps that are common to all scenarios in a
feature file. These steps are executed before each scenario in the feature file, reducing duplication and
improving readability.

10. How do you handle data tables and scenario outlines in Cucumber?
Data tables and scenario outlines are used for parameterization and data-driven testing in Cucumber. Data
tables are used to pass tabular data to steps, while scenario outlines allow you to define a scenario template
that can be executed with different sets of data.

11. What are the keywords used in Gherkin syntax?
Common keywords include:
1. Feature: Defines a high-level application feature.
2. Scenario: Describes a specific user behavior within a feature.
3. Given: Defines preconditions before the scenario starts.
4. When: Describes the action taken by the user.
5. Then: Describes the expected outcome after the action.
6. And: Combines multiple steps within a scenario.

12. How do you handle data-driven testing with Cucumber?
Cucumber supports data tables in feature files to provide multiple sets of data for a scenario. Step
definitions can access this data using libraries like DataTable.

13. How do you handle errors and exceptions in Cucumber tests?
Java exception handling mechanisms can be used within step definitions. Assertions from libraries like
JUnit can verify expected behavior.

14. What are hooks in Cucumber, and how are they used?
Hooks in Cucumber are special methods or blocks of code that run before or after certain events in the
execution of Cucumber scenarios. They allow you to perform setup and teardown tasks, such as initializing
data or closing resources.

1. Hooks are methods that run before or after scenarios (or entire features) for setup/teardown or logging
purposes.
2. Not part of the feature file.
3. Can be written in step definition class or can be written in a separate configuration file.

15. How many types of hooks are there in Cucumber?
There are four types of hooks in Cucumber:
1. @Before - Before each scenario
2. @After - After each scenario
3. @BeforeStep - Before each step of the scenario
4. @AfterStep - After each step of the scenario

16. What is the purpose of using @BeforeStep and @AfterStep hooks?
@BeforeStep and @AfterStep hooks allow you to execute setup and teardown tasks before and after each step
in a scenario. This can be useful for actions such as logging, capturing screenshots, or setting up context
for individual steps.

17. How do you prioritize hooks in Cucumber?
Hooks can be prioritized using the order attribute. By default, hooks are executed in the order they are
defined, but you can specify a numerical value to control the execution order.

18. What are the benefits of using Hooks?
1. Improved Code Readability: Separating setup and cleanup logic from test steps makes the code cleaner and
easier to understand.
2. Reduced Redundancy: Common setup and cleanup tasks can be defined in hooks, avoiding repetitive code across
scenarios.
3. Better Test Organization: Hooks help structure your tests by separating concerns and promoting modularity.

19. What the are 2 types of expressions supported in Cucumber?
1. Regular Expression
2. Cucumber Expression

Rules for using Expressions:
============================
1. Step def file will be generating the Cucumber Expression by default.
2. We can also use Regular Expression in Step def file.
3. Both Cucumber and Regular Expressions can't be used in single method of Step def file.

20. Regular Expression Quantifiers and examples?
([0-9]) -> Digits between 0 to 9
Quantifiers - It defines how many times a character should appear.
===========
+
*
?
{n}

([0-9]+)   -> 0 to 9 digits (One or more)
([0-9]{4}) -> 0000, 9999, 1212, 1234, 5678
([0-9]*)   -> 0 to 9 digits (Zero or more)
([0-9]?)   -> 0 to 9 digits (Zero or once)

21. How do you access DataTable values in step definitions?
In Java, DataTable values are accessed using the DataTable class. You can retrieve the data as a
list of lists or as a list of maps, depending on your preference.

22. What is the difference between a list of lists and a list of maps when accessing DataTable values?
A list of lists represents the DataTable as rows and columns, where each row is represented as a list
of strings. A list of maps represents the DataTable as a list of dictionaries, where each row is
represented as a map with column names as keys and cell values as values.

23. How do you convert a DataTable into a list of lists in Cucumber?
In Java, you can convert a DataTable into a list of lists using the asList() method:
List<List<String>> data = dataTable.asLists();

24. When would you use DataTables in Cucumber scenarios?
DataTables are useful when you need to test scenarios with multiple input combinations or when you
want to provide structured input data directly within the feature files. They are commonly used in
scenarios involving data-driven testing or parameterization.

25. Can you provide an example of using DataTables for parameterization in Cucumber?
Scenario Outline: Login with different credentials
  Given I am on the login page
  When I enter the following username and password
    | Username | Password |
    | <username> | <password> |
  And I click the login button
  Then I should be logged in successfully

  Examples:
    | username | password |
    | user1    | pass1    |
    | user2    | pass2    |

26. How do you handle dynamic DataTables with varying column lengths in Cucumber?
You can use scenario outlines with Examples tables to handle dynamic DataTables with varying column
lengths. Each row in the Examples table represents a different set of data, allowing you to handle
different DataTable structures dynamically.

27. Are DataTables mutable in Cucumber?
No, DataTables are immutable by default in Cucumber. Once created, the data in a DataTable cannot be
modified. However, you can create modified copies of DataTables using methods like withColumnTitles()
or transpose(), which return new DataTable instances with the desired modifications.


